from ccrc import ccitt_message, format_bytes


class ACT1:
    NONE = 0
    USE_CTRL_1 = 1 << 0
    POLARITY_WH = 1 << 5  # White Hot
    POLARITY_BH = 0 << 5  # Black Hot


class ACT2:
    NONE = 0
    USE_FOV = 1 << 5


class CTRL1:
    """Calibration method"""
    NONE = 0
    DEFAULT = 0x3 & 0b111


class FOV:
    NONE = (0x00, 0x00)
    WFOV = (0x00, 0x64)
    MFOV = (0x00, 0xC8)
    NFOV = (0x01, 0x90)


def compile_zoom_command(act1: int = ACT1.NONE,
                         act2: int = ACT2.NONE,
                         ctrl1: int = CTRL1.NONE,
                         fov: tuple[int, int] = FOV.WFOV):
    DLE = 0x10
    STX = 0x02
    MID = 0xF4
    STM = 0x02
    Rsrv = 0x00
    CTRL2 = 0x00
    CTRL3 = 0x80
    ETX = 0x03

    header = [DLE, STX, MID, STM]
    footer = [DLE, ETX, Rsrv, Rsrv]

    if act1 & ACT1.USE_CTRL_1:
        body = [act1, act2, Rsrv, ctrl1, CTRL2, *fov, CTRL3, Rsrv, Rsrv]
    else:
        body = [act1, act2, Rsrv, *fov]
    cmd = [*header, *body, *footer]
    ret = ccitt_message(cmd)
    # print(format_bytes(ret), len(ret))
    return ret


def compile_calibration(polarity: int, fov: tuple[int, int]):
    return compile_zoom_command(act1=ACT1.USE_CTRL_1 | polarity,
                                act2=ACT2.USE_FOV,
                                ctrl1=CTRL1.DEFAULT,
                                fov=fov)


def compile_zoom_only(polarity: int = ACT1.POLARITY_WH, fov: tuple[int, int] = FOV.WFOV):
    return compile_zoom_command(act1=polarity, act2=ACT2.USE_FOV, fov=fov)
    

def compile_polarity_only(polarity: int = ACT1.POLARITY_WH):
    return compile_zoom_command(act1=polarity)
